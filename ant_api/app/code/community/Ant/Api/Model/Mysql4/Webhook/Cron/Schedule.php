<?php
class Ant_Api_Model_Mysql4_Webhook_Cron_Schedule extends Mage_Core_Model_Mysql4_Abstract {


    protected $_serializableFields = array(
        'request_data' => array(
            array(), null
        ),
    );


    public function _construct()
    {
        // TODO: Implement _construct() method.
        $this->_init("ant_api/webhook_cron_schedule","schedule_id");
    }

    public function _beforeSave(Mage_Core_Model_Abstract $object) {
        // modify create / update dates

        if ($object->isObjectNew() && !$object->hasCreatedAt()) {
            $object->setCreatedAt(Mage::getSingleton('core/date')->gmtDate());
        }

        $object->setUpdatedAt(Mage::getSingleton('core/date')->gmtDate());

        $identifier = $this->buildIdentifier($object);
        $object->setIdentifier($identifier);

        return parent::_beforeSave($object); // TODO: Change the autogenerated stub
    }

    public function buildIdentifier($object) {
        $identifierParts = [];
        $webhookDataSelect = $this->_getReadAdapter()->select()->from($this->getTable('ant_api/webhook'))->where('ant_api_webhook_id = :webhookId');
        $webhookData = $this->_getReadAdapter()->fetchRow($webhookDataSelect, array('webhookId' => $object->getWebhookId()));
        if (isset($webhookData['ant_api_webhook_action'])) {
            $identifierParts[] = $webhookData['ant_api_webhook_action'];
        }
        if (!is_array($object->getRequestData())) {
            $requestData = unserialize($object->getRequestData());
        } else {
            $requestData = $object->getRequestData();
        }
        if ($requestData['id']) {
            $identifierParts[] = $requestData['id'];
        }
        return join('_', $identifierParts);
    }

    /**
     * Get most recent checksum for the data that matches the identifier
     *
     * @param \Ant_Api_Model_Webhook_Cron_Schedule $schedule
     *
     * @return \Ant_Api_Model_Mysql4_Webhook_Cron_Schedule
     */
    public function getMostRecentChecksum(Ant_Api_Model_Webhook_Cron_Schedule $schedule) {
        $adapter = $this->_getReadAdapter();
        $bind    = array('identifier' => $this->buildIdentifier($schedule));
        $select  = $adapter
            ->select('checksum')
            ->from($this->getMainTable())
            ->where('identifier = :identifier')
            ->limit(1)
            ->order('created_at desc');
        return $this->getReadConnection()->fetchRow($select, $bind);
    }
}